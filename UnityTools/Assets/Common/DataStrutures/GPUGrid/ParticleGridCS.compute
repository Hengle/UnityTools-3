#pragma kernel UpdateColor
#pragma kernel ResetColor


#define SIMULATION_BLOCK_SIZE 128
#define GRID_BLOCK_SIZE 8
#include "CommonData.cginc"
#include "GridHelper.cginc"

RWStructuredBuffer<Particle> _ParticleBuffer;
RWStructuredBuffer<Particle> _ParticleBufferSorted;
RWStructuredBuffer<uint2> _GridBuffer;

float4 _TargetPos;
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void ResetColor(uint3 DTid : SV_DispatchThreadID)
{
	const unsigned int ID = DTid.x; // Particle ID to operate on
	_ParticleBuffer[ID].pos = _ParticleBufferSorted[ID].pos;
	_ParticleBuffer[ID].col = 1;
}

[numthreads(1, 1, 1)]
void UpdateColor(uint3 DTid : SV_DispatchThreadID)
{
	float3 pos = _TargetPos.xyz;

	float3 cellPos = PosToCellPos(pos, _GridMin, _GridMax, _GridSpacing);
	int3 cid = CellPosToCellIndex(cellPos);

	int range = 8;

	for(int i = max(cid.x-range, 0); i <= min(cid.x+range, _GridSize.x-1); ++i)
	{
		for(int j = max(cid.y-range, 0); j <= min(cid.y+range, _GridSize.y-1); ++j)
		{
			for(int k = max(cid.z-range, 0); k <= min(cid.z+range, _GridSize.z-1); ++k)
			{
				uint2 startEnd = _GridBuffer[CellIndexToCellID(int3(i,j,k), _GridSize)];
				for(uint id = startEnd.x; id < startEnd.y; ++id)
				{
					_ParticleBuffer[id].col = float4(1,0,0,1);
				}
			}
		}
	}
}